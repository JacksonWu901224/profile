常用
#查看 Git 命令的說明文件
git help

# 查看當前修改狀態
git status  

# 加入所有修改 (注意 add 和 . 之間要有空格)
git add .  

# 建立一次 commit，後面 -m 要加訊息
git commit -m "你的提交訊息"  

# 推送到遠端 main 分支
git push origin main  
----------------------------------------------------------------------------------------------------------------------------------------------
network

內部ip
ipconfig

外部ip
nslookup myip.opendns.com resolver1.opendns.com

──────────────────────────────────────────────────────────────────────────────────────────────
比較項目     |   直線(乙太網路纜線)                 │ 跳線(Patch Cable)
────────────────────────────────────────────────────────────────────────────────────────────
長度        |   較長，從幾英尺到數百英尺             │ 較短，通常幾英寸到幾英尺
────────────────────────────────────────────────────────────────────────────────────────────
用途        |    永久性安裝，例如佈線到不同房間，       │ 臨時性連接，例如在網路機架內互連設備、
            |   用於高速資料傳輸的穩定連接             │ 測試設備或在不同設備之間進行臨時駁接
────────────────────────────────────────────────────────────────────────────────────────────
佈建方式    |    於牆壁內或走廊固定佈線               │ 位於機架內或設備附近，用於快速連接
────────────────────────────────────────────────────────────────────────────────────────────
結構        |    雙絞銅線，可最大限度減少干擾           │ 也可以是雙絞線，但有不同型號
                                                     （非屏蔽或屏蔽）以滿足不同用途
────────────────────────────────────────────────────────────────────────────────────────────

乙太網路透過標準化的IEEE 802.3協議，利用[載波感應多重存取/碰撞偵測（CSMA/CD）]或[交換器（Switch）]來管理資料傳輸。
1. CSMA/CD (舊式集線器網路)
概念: 每個節點共享同一條網路線，並以廣播方式傳送訊框。
運作流程:
載波感應(Carrier Sense): 傳送前先監聽網路是否有其他訊號。
多重存取(Multiple Access): 多個節點共用同一通道。
碰撞偵測(Collision Detection): 傳送過程中，若偵測到訊號碰撞（表示有多個節點同時傳送），則立即停止傳送。
訊息重送: 碰撞發生後，傳送端會發送一個「Jam signal」並等待一小段隨機時間後重新傳送。 
2. 交換器(現代網路)
概念: 使用交換器代替集線器，建立點對點的連接。 
運作流程:
接收與處理: 交換器接收到數據封包後，會根據封包內的目的MAC 位址查找內建的位址表。 
轉發封包: 將封包直接轉發到目標設備所在的埠口。 
解決衝突: 在全雙工模式下，交換器可以同時進行傳輸和接收，避免了訊號碰撞。 
流量控制: 如果高速埠的數據傳輸到較低速埠，交換器會暫時儲存數據並發送「暫停訊框」(Pause frame) 給傳送端，讓傳送端暫停傳送以避免緩衝區溢出。 

repeater:一個將輸入訊號增強放大的類比裝置，而不考慮輸入訊號種類（是類比的還是數位的）。
  優點:延長傳送距離。
  缺點:
       1.由於共享頻寬，每台電腦理論分配的頻寬減少，就是效能減少。
       2.碰撞領域變大(碰撞所影響到的範圍變大)。
    中繼器是用來加強纜線上的訊號，把訊號送得更遠，以延展網路長度。當電子訊號在電纜上傳送時，
    訊號強度會隨著傳遞長度的增加而遞減。因此需要中繼器將訊號重新加強以增加資料的傳送距離。

hub:是OSI 7 layer的layer 1設備，只會放大電子訊號，但不去判斷封包的內容。目前星狀架構，hub以取代repeater。hub跟repeater運作原理一樣。
    =>個人電腦和hub相接是用雙絞線的直線相接。
    =>hub和hub相接是用雙絞線的跳線相接。
  優點:延長傳送距離。
  缺點:
       1.由於共享頻寬，每台電腦理論分配的頻寬減少，就是效能減少。
       2.碰撞領域變大(碰撞所影響到的範圍變大)。
    由於集線器會把收到的任何數位訊號，經過再生或放大，再從集線器的所有ports送出，這會造成訊號之間碰撞的機會很大，
    而且訊號也可能被竊聽，並且這代表所有連到集線器的裝置，都是屬於同一個碰撞網域以及廣播網域，因此大部份集線器已被交換機取代。

bridge(橋接器):改良了hub的缺點，是OSI 7 layer的layer 2設備。可以認得每個封包的來源端和目的端的MAC address。主要用在RG-58同軸電纜的網路線上。
              bridge內部有forwarding table,port number和所接電腦的MAC address對照表，對於不知道該往哪裡送的封包
              (目的端的MAC address不在forwarding tabble)，會從bridge的每個port送出去。
    A...B...bridge...C...D
    特性:
        增加效能:A傳給B，封包會被bridge擋住，這段時間C就可以傳資料給D。
        隔離碰撞封包:若bridge左段發生碰撞，不會影響到右段。

switch:效能好，價格便宜。是OSI 7 layer的layer 2設備，已取代hub,bridge。主要用在雙絞線的網路線上。大部分的port都是全雙工(可同時傳送接收資料)。可認得電腦在哪個port上。
       有學習功能，會建立forwarding table。
        ┌───┐   ┌───┐   ┌───┐   ┌───┐
        │ A │   │ B │   │ C │   │ D │
        └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘
          │       │       │       │
          └───────┴───────┴───────┘
                      │
                  ┌──────┐
                  │Switch│
                  └──────┘

    How to build a forwarding table?
      每個乙太網路frame會含有來源端和目的端的MAC address。(OSI layer2的封包稱為frame，layer3的封包才稱為packet)
      剛開始，forwarding table is empty。
      steps:
            1.A傳資料給D。
                swtich從port-1收到，知道電腦A連接到port-1，建立一筆(1,A)的table。
            2.因為forwarding table is empty，switch不知送往哪裡，所以全送，每個port都送，但只有D會收到這個封包，
              因為B,C發現MAC address不是自己的MAC address，所以B,C會把這個封包丟掉。
            3.D收到是送給自己，接收資料後回傳給A。
                swtich從port-4收到，知道電腦D連接到port-4，建立一筆(4,D)的table。
            4.switch查表得知A在port-1，就從port-1送出。
            5.A收到。
    重要觀念:forwarding table的建立是根據來源端的MAC address。
    特性:
        增加效能:A傳給B，封包會被bridge擋住，這段時間C就可以傳資料給D。
        隔離碰撞封包:若switch左段發生碰撞，不會影響到右段。稱為microsegment。
比較:
switch:                                             hub:
┌─────────────────────────────────────────┐         ┌─────────────────────────────────────────┐
│   ──────────────────     ────────────── │         │                                         │      
│   │   ─────────────│─────────────     │ │         │ ─────────────────────────────────────── │      
│   │   │            │     │      │     │ │         │ │  │     │     │          │       │ │ | │         
└─────────────────────────────────────────┘         └─────────────────────────────────────────┘
    │   │            │     |      │     │             │  │     │     │          │       │ │ |

switch         |  hub   
---------------+-----------
專屬頻寬        |  共用頻寬     
全雙工          |  半雙工      
可隔離碰撞域封包 |  無法隔離碰撞域封包
Layer 2         |  Layer 1  
辨別MAC位址     |  複製電子訊號   
傳送表          |  無表格      
----------------------------------------------------------------------------------------------------------------------------------------------

分支管理

# 查看分支
git branch

# 建立新分支
git branch 分支名稱

# 切換分支
git checkout 分支名稱
# 或 Git 2.23+ 推薦用
git switch 分支名稱

# 建立新分支並切換過去
git checkout -b 新分支名稱
# 或
git switch -c 新分支名稱

# 合併分支
git merge 分支名稱
----------------------------------------------------------------------------------------------------------------------------------------------
遠端操作

# 取得遠端更新，但不合併
git fetch

# 拉取遠端最新變更並自動合併
git pull origin main

# 刪除遠端分支
git push origin --delete 分支名稱
----------------------------------------------------------------------------------------------------------------------------------------------
檢查歷史

# 查看提交歷史
git log

# 簡短歷史
git log --oneline

# 查看圖形化分支歷史
git log --oneline --graph --all --decorate
----------------------------------------------------------------------------------------------------------------------------------------------
暫存與修改

# 取消暫存（還保留修改）
git reset HEAD 檔案名稱

# 丟棄本地修改（回到最後一次 commit）
git checkout -- 檔案名稱

# 比較修改
git diff          # 與暫存區比
git diff --staged # 與 commit 比
----------------------------------------------------------------------------------------------------------------------------------------------
回退與還原

# 回到上一次 commit（保留修改）
git reset --soft HEAD~1

# 回到上一次 commit（取消修改）
git reset --hard HEAD~1

# 針對某個 commit 回退
git revert commit_id
----------------------------------------------------------------------------------------------------------------------------------------------
標籤管理

# 建立標籤
git tag v1.0

# 查看標籤
git tag

# 推送標籤到遠端
git push origin v1.0